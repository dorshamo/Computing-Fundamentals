// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.

   // zx
   Mux16(a=x, b=false, sel=zx, out=mux16x1);

   // nx
   Not16(in=mux16x1, out=notx);
   Mux16(a=mux16x1, b=notx, sel=nx, out=mux16x2);

   // zy
   Mux16(a=y, b=false, sel=zy, out=mux16y1);

   // ny
   Not16(in=mux16y1, out=noty);
   Mux16(a=mux16y1, b=noty, sel=ny, out=mux16y2);

   // f
   Add16(a=mux16x2, b=mux16y2, out=addxy);
   And16(a=mux16x2, b=mux16y2, out=andxy);
   Mux16(a=andxy, b=addxy, sel=f, out=fxy);

   // no, ng, out
   Not16(in=fxy, out=notfxy);
   Mux16(a=fxy, b=notfxy, sel=no, out=out, out[0..7] = mux16fxy1, out[8..15] = mux16fxy2, out[15] = ng);

   // zr
   Or8Way(in=mux16fxy1, out=zr1);
   Or8Way(in=mux16fxy2, out=zr2);
   Or(a=zr1, b=zr2, out=notzr);
   Not(in=notzr, out=zr);
}